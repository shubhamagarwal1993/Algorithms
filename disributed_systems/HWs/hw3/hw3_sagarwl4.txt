NAME: Shubham Agarwal
netid: sagarwl4


CS 425/ECE 428 Distributed Systems
Homework 3 Answer Sheet


1. (a) The cut is not consistent as the event ‘e’ is not included in the cut but ‘g’ is included and g takes place after ‘e’.
1. (b) {a, b, h} are the number of events that form a consistent cut. 


2.	No, it is not possible to solve the Byzantine Generals problem on such a network.

Explanation:	
	Let the number of nodes be ‘n’. For consensus of a single common value, nodes send their individual value to all the other ‘n-1’ nodes. We take the value which has the most number of occurrences and that becomes the final value 	which all the nodes take. 
	If we have 4 nodes, the following scenario can be possible which will not let us decide on a common value.


	Round 1: {p1 = 0}, {p2 = 1}, {p3 = 1}, {p4 = 1}

	Now, all the nodes broadcast a message to all the other nodes containing the value they have. Let us assume that node p3 and p4 crashes before broadcasting.
	
	The following values will be recorded in the nodes:
	Round 2: {p1 = 0, p2 = 1}, {p2 = 1, p1 = 0}, {p3 = crashed}, {p4 = crashed}

	So, we see here that the first two nodes have different values and there is no majority and thus we cannot come to a common value which all the nodes can use as their final value.

	However, if there was only one Byzantine faulty node then this problem could have been been solved as there would have been three nodes alive and with an odd number of nodes, there has to be one value which will be majority.

	The relation between the number of nodes ‘n’ and Byzantine failures is given by 
	n >= 3f + 1. On solving this equation, we can see that for two nodes, we can have either have one or no failures for the system to be stable.


3	No, it is not possible to solve the problem on such a network.

Explanation:
	If we have 4 nodes, the following scenario can be possible which will not let us decide on a common value.

	Round 1: {p0 = 0}, {p1 = 1}, {p2 = 1}, {p3 = 0}

	Now, all the nodes broadcast a message to all the adjacent nodes containing the value they have. Let us assume that node p0 and p2 crashes before broadcasting.
	
	The following values will be recorded in the nodes:
	Round 2: {p0 = crashed}, {p1 = 1}, {p2 = crashed}, {p3 = 0}

	So, we see here that the nodes p1 and p3 have different values and there is no majority and rather no input from other nodes to decide upon a common value which all the nodes can use as their final value.


Recommended: 
	Even if there was only one faulty node then also this problem could not have been solved as there would have been three nodes alive but only two of them would really communicate and with two values, we cannot decide on 	one value which will be majority.

	Below is how:

	Round 1: {p0 = 0}, {p1 = 1}, {p2 = 1}, {p3 = 0}

	Now, all the nodes broadcast a message to all the adjacent nodes containing the value they have. Let us assume that node p0 crashes before broadcasting.
	
	The following values will be recorded in the nodes:
	Round 2: {p0 = crashed}, {p1 = 1, p2 = 1}, {p2 = 1, p1 = 1, p3 = 0}, {p3 = 0, p2 = 1}
	
	So, we see here that the node p2 can decide on a single value but the nodes p1 and p3 cannot really decide on the final value.

